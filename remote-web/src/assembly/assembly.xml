<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.1.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd">
    <!-- id 标识符，添加到生成文件名称的后缀符。如果指定id的话，目标文件则是 ${artifactId}-${id}.jar -->
    <id>distribution</id>
    <formats>
        <!-- 支持的打包格式有:zip,tar,tar.gz(or tgz).tar.bz2(or tbz2),tar.snappy,tar.xz(or txz),jar,dir,war.可以同时指定多个打包格式 -->
        <format>dir</format>
        <format>zip</format>
    </formats>
    <!-- 是否包括基本目录 -->
    <includeBaseDirectory>true</includeBaseDirectory>
    <!-- 基本目录,默认为${project.build.finalName} -->
    <baseDirectory>${project.build.finalName}</baseDirectory>
    <fileSets>
        <!-- 管理一组文件的存放位置 -->
        <fileSet>
            <directory>${project.basedir}/src/main/resources</directory>
            <outputDirectory>/config</outputDirectory>
            <excludes>
                <exclude>/dynamic_compiler_files/**</exclude>
                <exclude>/plugins/**</exclude>
                <exclude>/workspace/**</exclude>
            </excludes>
        </fileSet>
        <fileSet>
            <directory>${project.basedir}/src/main/resources/dynamic_compiler_files</directory>
            <outputDirectory>/dynamic_compiler_files</outputDirectory>
            <includes>
                <include>/**</include>
            </includes>
        </fileSet>
        <fileSet>
            <directory>${project.basedir}/src/main/resources/plugins</directory>
            <outputDirectory>/plugins</outputDirectory>
            <includes>
                <include>/**</include>
            </includes>
        </fileSet>
        <fileSet>
            <directory>${project.basedir}/src/main/resources/workspace</directory>
            <outputDirectory>/workspace</outputDirectory>
            <includes>
                <include>/**</include>
            </includes>
        </fileSet>
        <fileSet>
            <directory>${project.basedir}/src/bin</directory>
            <outputDirectory>/bin</outputDirectory>
            <includes>
                <include>/**</include>
            </includes>
            <!-- 指定文件属性，使用八进制表达，分别为(User)(Group)(Other)所属属性，默认为 0644 -->
            <fileMode>0755</fileMode>
        </fileSet>
    </fileSets>
    <files>
        <!-- 可以将指定文件拷贝到指定目录 -->
        <file>
            <!-- 源文件，相对路径或绝对路径 -->
            <source>README.md</source>
            <!-- 输出目录 -->
            <outputDirectory>/</outputDirectory>
        </file>
    </files>
    <dependencySets>
        <dependencySet>
            <!-- 指定包依赖目录，该目录是相对于根目录 -->
            <outputDirectory>/lib</outputDirectory>
            <!-- groupId:artifactId:type[:classifier]:version -->
            <!-- <includes>
                <include>*:*:*:*</include>
            </includes> -->
            <fileMode>0644</fileMode>
            <directoryMode>0755</directoryMode>
            <!-- 是否开启严格过滤模式 -->
            <useStrictFiltering>false</useStrictFiltering>
            <!-- 依赖的jar包是否需要解压 -->
            <unpack>false</unpack>
            <!-- 将scope为runtime的依赖包打包到lib目录下。 -->
            <scope>runtime</scope>
            <!-- 是否将当前项目构建为jar包后也拷贝到指定的目录下 -->
            <useProjectArtifact>true</useProjectArtifact>
            <!-- 项目构建后会产生多个jar文件,是否将其他的jar文件也拷贝到指定的目录下 -->
            <useProjectAttachments>false</useProjectAttachments>
            <!-- 是否将传递依赖的jar文件拷贝到指定的目录下 -->
            <useTransitiveDependencies>true</useTransitiveDependencies>
            <!-- 是否过滤传递依赖的jar文件 -->
            <useTransitiveFiltering>false</useTransitiveFiltering>
        </dependencySet>
    </dependencySets>
</assembly>